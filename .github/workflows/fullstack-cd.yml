name: Full Stack CD

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Docker image version (SHA oder Tag)"
                required: true
                type: string
                default: "latest"

jobs:
    deploy:
        runs-on: ubuntu-latest

        steps:
            - name: Set VERSION from input
              run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Create Docker network
              run: docker network create test-net

            - name: Start PostgreSQL Database
              run: |
                  docker run -d --name postgres-db --network test-net \
                    -e POSTGRES_DB=koerperschmiede \
                    -e POSTGRES_USER=admin \
                    -e POSTGRES_PASSWORD=admin \
                    postgres:15.3

            - name: Start Backend Container
              run: |
                  docker run -d --name backend-container --network test-net -p 8080:8080 \
                    -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/koerperschmiede \
                    -e SPRING_DATASOURCE_USERNAME=admin \
                    -e SPRING_DATASOURCE_PASSWORD=admin \
                    ${{ secrets.DOCKER_USERNAME }}/devops-github-backend:${{ env.VERSION }}

            - name: Start Frontend Container
              run: |
                  docker run -d --name frontend-container --network test-net -p 3000:3000 \
                    -e NEXT_PUBLIC_API_URL=http://backend-container:8080 \
                    ${{ secrets.DOCKER_USERNAME }}/devops-github-frontend:${{ env.VERSION }}

            - name: Wait for backend to be healthy
              run: |
                  for i in {1..30}; do
                    if curl -s http://localhost:8080/actuator/health | grep '"status":"UP"'; then
                      echo "‚úÖ Backend is healthy"
                      exit 0
                    else
                      echo "‚è≥ Waiting for backend..."
                      sleep 5
                    fi
                  done
                  echo "‚ùå Backend not healthy, printing logs:"
                  docker logs backend-container || true
                  docker logs postgres-db || true
                  exit 1

            - name: Test login endpoint returns accessToken and userId when login as admin
              run: |
                  echo "üîê Testing login..."
                  RESPONSE=$(curl -s -X POST http://localhost:8080/api/v1/auth/authenticate \
                    -H "Content-Type: application/json" \
                    -d '{"email":"admin@admin.com", "password":"test"}')

                  echo "Response: $RESPONSE"

                  echo "$RESPONSE" | grep -q '"accessToken"' || (echo "‚ùå No accessToken in response" && exit 1)
                  echo "$RESPONSE" | grep -q '"userId"' || (echo "‚ùå No userId in response" && exit 1)

                  echo "‚úÖ Login response is valid"

            - name: Check frontend HTML response
              run: |
                  if curl -s http://localhost:3000 | grep "<!DOCTYPE html>"; then
                    echo "‚úÖ Frontend is running"
                  else
                    echo "‚ùå Frontend is not responding"
                    docker logs frontend-container || true
                    exit 1
                  fi

            - name: Check frontend contains welcome heading
              run: |
                  curl -s http://localhost:3000 | grep -q '<h1[^>]*>Hallo K√∂rperschmiede</h1>' \
                    && echo "‚úÖ Greeting found on homepage" \
                    || (echo "‚ùå Greeting missing on homepage" && exit 1)

            - name: Check login page contains login form
              run: |
                  curl -s http://localhost:3000/login | grep -q '<form' \
                    && echo "‚úÖ Login page contains form" \
                    || (echo "‚ùå No login form found on login page" && exit 1)
